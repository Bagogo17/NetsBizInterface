{
  "retrieval_ref": "TEST0917",
  "mti": "0340",
  "process_code": "000000",
  "amount": "000000000123",
  "stan": "315096",
  "transaction_time": "125500",
  "transaction_date": "0917",
  "response_code": "00",
  "approval_code": "315096",
  "host_tid": "38018101",
  "host_mid": "11138018100",
  "SOF_uri": "http://dbslifesg.com/",
  "currency_code": "SGD",
  "payment_type_id": "MBBP",
  "transaction_id": "TEST0917",
  "transaction_status": "04"
}



RID	TID
11138038100	38038101
11138058500	38058501
11136164800	36164801
11138059700	38059701
11138059800	38059801
11138060300	38060301
11138060600	38060601
11100000424	00001494
11100000425	00001495
11138010800	38010801
11136211500	36211501
11100001712	20003481


1.	KT – 91461037
2.	Rachel - 92303975



INSERT INTO mkck_master_data_action_history (id, master_data_request_id, domain_class, status, `action`, actor_id, action_timestamp, created_timestamp, edited_timestamp) VALUES('d8a5109a-14ec-4836-ba9d-b1194477a983', '8677142f-b837-4f4e-bd55-786e07f3cb69', 'UserGroup', 'PENDING_APPROVAL', 'SUBMITTED', 'SYSTEM', '2025-06-18 22:36:19', '2025-06-18 22:36:19', '2025-06-18 22:36:19');
INSERT INTO mkck_master_data_action_history (id, master_data_request_id, domain_class, status, `action`, actor_id, action_timestamp, created_timestamp, edited_timestamp) VALUES('2a5301dd-b003-463b-99de-dc1a761800cb', '8677142f-b837-4f4e-bd55-786e07f3cb69', 'UserGroup', 'PENDING_EFFECTIVE', 'APPROVED', 'SYSTEM', '2025-06-18 22:57:45', '2025-06-18 22:57:45', '2025-06-18 22:57:45');
INSERT INTO mkck_master_data_action_history (id, master_data_request_id, domain_class, status, `action`, actor_id, action_timestamp, created_timestamp, edited_timestamp) VALUES('96a958b2-ff57-428d-91e3-c67d6b96e485', '8677142f-b837-4f4e-bd55-786e07f3cb69', 'UserGroup', 'EFFECTIVE', 'CREATED/DELETED/UPDATED', 'SYSTEM', '2025-06-18 22:57:45', '2025-06-18 22:57:45', '2025-06-18 22:57:45');




#import <AVFoundation/AVFoundation.h>
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
   [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayback error:nil];
   [[AVAudioSession sharedInstance] setActive:YES error:nil];
   return YES;
}


}else {
                //Update TIDs List for worker
                if (!tidList.isEmpty()) {
                    List<String> existingTids = activeMobUser.getRoles().stream()
                            .map(MobUserRole::getTid).filter(tid -> tid.contains(tids)).toList();
                    if (!existingTids.isEmpty()) {
                        throw new RuntimeException("This user has already been assigned to these terminals: " + existingTids);
                    }
                }
                
                if(!ridList.isEmpty()) {
                    List<TerminalInfoDto> terminalInfos =
                            terminalService.getTerminalsByTids(activeMobUser.getRoles().stream().map(MobUserRole::getTid).collect(Collectors.toSet()), MasterDataStatus.A);
                    List<String> existingRids = terminalInfos.stream()
                            .map(TerminalInfoDto::getRid)
                            .map(RetailerInfo::getRid)
                            .filter(ridList::contains)
                            .toList();
                    
                    if (!existingRids.isEmpty()) {
                        throw new RuntimeException("This user has already been assigned to these retailers: " + existingRids);
                    }

                }
            }

@Override
    public CriteriaResponse<QrTransactionRespWithTerminalName> findTransactionsAndTidNameWithFilters(String transactionDate, String transactionFromDate, String transactionToDate, BigDecimal fromAmount, BigDecimal toAmount, String retailId, String[] terminalIds, String[] paymentMethod, String stan, String status, Pageable pageable) {
        HibernateCriteriaBuilder cb = entityManager.unwrap(Session.class).getCriteriaBuilder();
        JpaCriteriaQuery<QrTransaction> query = cb.createQuery(QrTransaction.class);
        Root<QrTransaction> root = query.from(QrTransaction.class);

        List<Predicate> predicates = new ArrayList<>();

        // Transform transactionDate (DDMMYYYY) → YYYYMMDD
        Expression<String> year = cb.substring(root.get("transactionDate"), 5, 4);  // YYYY
        Expression<String> month = cb.substring(root.get("transactionDate"), 1, 2); // MM
        Expression<String> day = cb.substring(root.get("transactionDate"), 3, 2);   // DD

        Expression<String> formattedDate = cb.concat(
                cb.concat(year, month),
                day
        );

        if(transactionDate != null) {
            predicates.add(cb.equal(root.get("transactionDate"), transactionDate));
        }

        if (transactionFromDate != null && transactionToDate != null) {

            String fromFormatted = convertMmDdYyyyToYyyyMmDd(transactionFromDate);
            String toFormatted = convertMmDdYyyyToYyyyMmDd(transactionToDate);

            predicates.add(cb.between(formattedDate, fromFormatted, toFormatted));
        }


        if (fromAmount != null && toAmount != null) {
            predicates.add(cb.between(root.get("amount"), fromAmount, toAmount));
        }

        if (fromAmount != null && toAmount == null) {
            predicates.add(cb.greaterThanOrEqualTo(root.get("amount"), fromAmount));
        }

        if (toAmount != null && fromAmount == null) {
            predicates.add(cb.lessThanOrEqualTo(root.get("amount"), toAmount));
        }

        // Add retail ID filter
        if (retailId != null && !retailId.isEmpty()) {
            predicates.add(cb.equal(root.get("mobTerminalRid"), retailId));
        }

        // Add terminal ID filter
        if (terminalIds != null && terminalIds.length > 0) {
            predicates.add(cb.in(root.get("mobTerminalTid"), terminalIds));
        }

        // Add payment method filter
//        if (paymentMethod != null && !paymentMethod.isEmpty()) {
        if (paymentMethod != null && paymentMethod.length > 0) {
//            predicates.add(cb.equal(root.get("paymentTypeId"), paymentMethod));
            predicates.add(cb.in(root.get("paymentTypeId"), paymentMethod));
        }

        // Add STAN filter
        if (stan != null && !stan.isEmpty()) {
            predicates.add(cb.equal(root.get("stan"), stan));
        }

        // Add status filter
        if (status != null && !status.isEmpty()) {
            predicates.add(cb.equal(root.get("status"), status));
        }

        // Apply predicates and sort by transaction_date in descending order
        query.where(predicates.toArray(new Predicate[0]));
        //order by the formatted date and time
        query.orderBy(cb.desc(formattedDate), cb.desc(root.get("transactionTime")));

        // Fetch results with pagination
        List<QrTransaction> qrTransactionQueryResult = entityManager.createQuery(query)
                .setFirstResult((int) pageable.getOffset())
                .setMaxResults(pageable.getPageSize())
                .getResultList();

        Set<String> terminalIdsQueried = qrTransactionQueryResult.stream().map(QrTransaction::getMobTerminalTid).collect(Collectors.toSet());
        List<TerminalInfoDto> terminalInfos = terminalService.getTerminalsByTids(terminalIdsQueried, MasterDataStatus.A);
        Map<String, String> tidToName = terminalInfos.stream().collect(Collectors.toMap(TerminalInfoDto::getTid, TerminalInfoDto::getAlias));
        List<QrTransactionRespWithTerminalName> results = qrTransactionQueryResult.stream().map(
                txn -> new QrTransactionRespWithTerminalName(txn, tidToName.getOrDefault(txn.getMobTerminalTid(), txn.getMobTerminalTid()))
        ).toList();

        // Count query for total records
        Long total = entityManager.createQuery(query.createCountQuery()).getSingleResult();
        BigDecimal totalAmount = entityManager.createQuery(query).getResultStream().map(QrTransaction::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);

        return new CriteriaResponse<>(results, pageable, total, totalAmount);
    }


package com.nets.netsbiz.mob.common.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
public class QrTransactionRespWithTerminalName {

    private QrTransaction qrTransaction;
    private String terminalName;
}


import { Platform } from 'react-native';
import Tts from 'react-native-tts';
import i18n from './path-to-your-i18n-config'; // adjust the import as needed

export const configureTtsLanguageAndVoice = async () => {
    try {
        Tts.stop();

        const initStatus = await Tts.getInitStatus();

        if (i18n.language === 'zh') {
            await Tts.setDefaultLanguage('zh-CN');
            if (Platform.OS === 'android') {
                await Tts.setDefaultVoice('cmn-cn-x-ccc-local');
            } else {
                await Tts.setDefaultVoice('com.apple.ttsbundle.Ting-Ting-compact');
            }
        } else {
            await Tts.setDefaultLanguage('en-US');
            if (Platform.OS === 'android') {
                await Tts.setDefaultVoice('en-us-x-tpf-local');
            } else {
                await Tts.setDefaultVoice('com.apple.voice.compact.en-US.Samantha');
            }
        }
    } catch (err) {
        if (err.code === 'no_engine') {
            Tts.requestInstallEngine();
        } else {
            console.error('TTS configuration error:', err);
        }
    }
};


curl -v -k -X POST -H "Content-Type: application/json"  -H "KeyId: aa06639e-2233-41df-8d95-7ae5f41ee9c1" -H "Sign: EvbslQmySZ/QaICzQP6S2fnyCvCnMyRCgA6yDUm3zg8="  https://uat-api.nets.com.sg:9443/sit/merchantservices/v1/device/logon -d '{"mti":"0800","process_code":"930000","stan":"841796","transaction_date":"0728","transaction_time":"112410","host_tid":"46287801","host_mid":"11146287800","npx_data":{"E103":"46287801"},"communication_data":[{"type":"https_proxy","category":"URL"}]}'


curl -v -k -X POST -H "Content-Type: application/json"  -H "KeyId: aa06639e-2233-41df-8d95-7ae5f41ee9c1" -H "Sign: 3qPdq+ATkoeuS+Lk1CE2+V/qHmM+iLEdxWzJkqmt0PU="  https://uat-api.nets.com.sg:9443/sit/merchantservices/v2/transaction/search -d '{"mti": "0100","process_code": "500000","search_count": "1","host_tid": "80544001","host_mid": "11180544000"}'


bE7tPL5A4oRfqI5YFnevXoPdLFdhFRG6xhNbSq2bUng=


public static void main(String[] args) throws NoSuchAlgorithmException {
        System.out.println("args = " + args);
        System.out.println("Signature Generator");
        String payload = "{\"mti\": \"0100\",\"process_code\": \"500000\",\"search_count\": \"1\",\"host_tid\": \"38018101\",\"host_mid\": \"11138018100\"}2f966234-28d1-4b4b-acb3-ff41b590f6ec";
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] hashBytes = messageDigest.digest(payload.getBytes(StandardCharsets.UTF_8));
        String signature = Base64.getEncoder().encodeToString(hashBytes);
        System.out.println("signature = " + signature);
    }
